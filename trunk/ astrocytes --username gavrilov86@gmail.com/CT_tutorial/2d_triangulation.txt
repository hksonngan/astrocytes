cam.SetCenter(vec3(5,5,0));
	cam.SetDistance(11.5f);

	v2vec vv;
	iv2vec ii;
	int idd=0;
	vv.push_back(vec2(0 ,0));
	vv.push_back(vec2(10,0));
	vv.push_back(vec2(10,10));
	vv.push_back(vec2(0 ,10));
	ii.push_back(ivec2(0,1)+ivec2(idd));
	ii.push_back(ivec2(1,2)+ivec2(idd));
	ii.push_back(ivec2(3,0)+ivec2(idd));
	ii.push_back(ivec2(2,3)+ivec2(idd));
	idd+=4;
	
	vec2 tmpt(1.2,1.01);

	tmpt.set(1.2,1.01);
	vv.push_back(vec2(0.1 ,0.2)+tmpt);
	vv.push_back(vec2(0.1 ,1.2)+tmpt);
	vv.push_back(vec2(1.1 ,1.2)+tmpt);
	vv.push_back(vec2(1.1 ,0.2)+tmpt);
	ii.push_back(ivec2(0,1)+ivec2(idd));
	ii.push_back(ivec2(1,2)+ivec2(idd));
	ii.push_back(ivec2(3,0)+ivec2(idd));
	ii.push_back(ivec2(2,3)+ivec2(idd));
	idd+=4;

	tmpt.set(2.4,2.01);
	vv.push_back(vec2(0.1 ,0.2)+tmpt);
	vv.push_back(vec2(0.1 ,1.2)+tmpt);
	vv.push_back(vec2(1.1 ,1.2)+tmpt);
	vv.push_back(vec2(1.1 ,0.2)+tmpt);
	ii.push_back(ivec2(0,1)+ivec2(idd));
	ii.push_back(ivec2(1,2)+ivec2(idd));
	ii.push_back(ivec2(3,0)+ivec2(idd));
	ii.push_back(ivec2(2,3)+ivec2(idd));
	idd+=4;

	tmpt.set(6.4,2.11);
	vv.push_back(vec2(0.1 ,0.2)+tmpt);
	vv.push_back(vec2(0.1 ,1.2)+tmpt);
	vv.push_back(vec2(2.1 ,1.2)+tmpt);
	vv.push_back(vec2(1.1 ,0.2)+tmpt);
	ii.push_back(ivec2(0,1)+ivec2(idd));
	ii.push_back(ivec2(1,2)+ivec2(idd));
	ii.push_back(ivec2(3,0)+ivec2(idd));
	ii.push_back(ivec2(2,3)+ivec2(idd));
	idd+=4;

		tmpt.set(5.4,6.01);
	vv.push_back(vec2(0.1 ,0.2)+tmpt);
	vv.push_back(vec2(0.1 ,1.2)+tmpt);
	vv.push_back(vec2(1.1 ,1.2)+tmpt);
	vv.push_back(vec2(1.1 ,0.2)+tmpt);
	ii.push_back(ivec2(0,1)+ivec2(idd));
	ii.push_back(ivec2(1,2)+ivec2(idd));
	ii.push_back(ivec2(3,0)+ivec2(idd));
	ii.push_back(ivec2(2,3)+ivec2(idd));
	idd+=4;

		tmpt.set(5.4,6.01);
	vv.push_back(vec2(0.5 ,0.4)+tmpt);
	vv.push_back(vec2(0.4 ,1.0)+tmpt);
	vv.push_back(vec2(1.0 ,1.0)+tmpt);
	vv.push_back(vec2(1.0 ,0.6)+tmpt);
	ii.push_back(ivec2(0,1)+ivec2(idd));
	ii.push_back(ivec2(1,2)+ivec2(idd));
	ii.push_back(ivec2(3,0)+ivec2(idd));
	ii.push_back(ivec2(2,3)+ivec2(idd));
	idd+=4;
	
	tmpt.set(3.4,5.01);
	vv.push_back(vec2(0.5 ,0.4)+tmpt);
	vv.push_back(vec2(0.4 ,1.0)+tmpt);
	vv.push_back(vec2(1.0 ,1.0)+tmpt);
	vv.push_back(vec2(1.0 ,0.6)+tmpt);
	ii.push_back(ivec2(0,1)+ivec2(idd));
	ii.push_back(ivec2(1,2)+ivec2(idd));
	ii.push_back(ivec2(3,0)+ivec2(idd));
	ii.push_back(ivec2(2,3)+ivec2(idd));
	idd+=4;

	iv3vec tt;
	MeshLines(vv,ii,tt);

	for(int i=0;i<ii.size();i++)
	{
		Line ll;
		vec2 a = vv[ii[i].x];
		vec2 b = vv[ii[i].y];
		ll.v[0].set(a.x,a.y,0);
		ll.v[1].set(b.x,b.y,0);
		section2d.push_back(ll);
	}
	neuron.push_back(Geometry(vec4(0,0,1,0.5)));
	neuron.push_back(Geometry(vec4(1,0,0,0.8)));
	for(int i=0;i<tt.size();i++)
	{
		vec3 v1 = vec3(vv[tt[i].x].x,vv[tt[i].x].y,0);
		vec3 v2 = vec3(vv[tt[i].y].x,vv[tt[i].y].y,0);
		vec3 v3 = vec3(vv[tt[i].z].x,vv[tt[i].z].y,0);
		vec3 cc = (v1+v2+v3)/3;
		v1 = cc + (v1-cc)*0.995;
		v2 = cc + (v2-cc)*0.995;
		v3 = cc + (v3-cc)*0.995;
		neuron[neuron.size()-2].AddTriangle(v1,v3,v2);
		neuron[neuron.size()-1].AddTriangle(v1,v2,v3);
	}